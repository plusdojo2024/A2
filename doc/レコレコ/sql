レビューを表示させる（レビューといいね）
SELECT count(review_id), r.review_id, r.user_id_writer, r.contents_id, r.title, r.review, r.image, r.created_at, g.user_id, g.good, u.user_name, u.icon
FROM review AS r
(INNER) JOIN good AS g
ON r.review_id=g.review_id
(INNER) JOIN user AS u
ON r.user_id_writer=u.user_id
WHERE r.user_id_writer=?
OR r.contents_id=?
GROUP BY r.review_id



【ユーザDAO】
ログイン
SELECT user_id, mail, pass, user_name, icon, open_close, introduction FROM user WHERE mail=? AND pass=? AND flag=1;

メール確認
SELECT count(*) FROM user WHERE mail=? AND flag=1;

ユーザ情報登録
INSERT INTO user(mail, pass, user_name, icon, open_close, introduction, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?);

ユーザ情報更新
UPDATE user SET mail=?, pass=?, user_name=?, icon=?, open_close=?, introduction=? WHERE user_id=? AND flag=1;


ユーザ情報削除
UPDATE user SET flag=0 WHERE user_id=? AND flag=1;

他ユーザの検索
SELECT user_id, user_name, icon, introduction FROM user WHERE user_id=? AND flag=1;


【レビューディスプレイDAO】
あるコンテンツか、あるユーザのレビューを表示させる（いいねはなし）
SELECT r.review_id, r.user_id_writer, r.contents_id, r.title, r.review, r.image, r.created_at, u.user_name, u.icon
FROM review AS r
(INNER) JOIN user AS u
ON r.user_id_writer=u.user_id
WHERE r.user_id_writer=? AND u.flag=1 AND u.open_close=1
OR r.contents_id=? AND u.flag=1 AND u.open_close=1;


【レビューディスプレイDAO】
ある特定のレビューのいいね数を数える
SELECT count(review_id)
FROM good
WHERE review_id=?
GROUP BY review_id;

自分がいいねをつけたかどうかを確認する
SELECT count(*)
FROM good
WHERE review_id=? 
AND user_id=?;



【タイムラインDAO】
タイムラインのレビューを表示させる（いいねはなし）
SELECT r.review_id, r.user_id_writer, r.contents_id, r.title, r.review, r.image, r.created_at, u.user_name, u.icon, f.user_id
FROM review AS r
(INNER) JOIN user AS u
ON r.user_id_writer=u.user_id
LEFT JOIN 
(SELECT user_id_favorite, user_id
FROM favorite_user
WHERE user_id=?) AS f
ON r.user_id_writer=f.user_id_favorite
WHERE f.user_id=?
AND u.flag=1  AND u.open_close=1
AND r.created >= (NOW() - INTERVAL 7 DAY);


【いいねDAO】
いいねの総数を表示させる
SELECT count(*),
FROM good AS g
INNER JOIN review AS r
ON g.review_id=r.review_id
WHERE r.user_id_writer=?;


【いいねDAO】
ランキングを表示させる
SELECT r.user_id_writer, u.user_name, u.icon, count(r.user_id_writer)
FROM review AS r
INNER JOIN user AS u
ON r.user_id_writer=u.user_id
INNER JOIN good AS g
ON r.review_id=g.review_id
WHERE u.flag=1  AND u.open_close=1
GROUP BY r.user_id_writer
ORDER BY count(r.user_id_writer)
(LIMIT 5);



【レビューDAO】

レビューの総数を表示させる

SELECT COUNT(review_id)
FROM review
WHERE user_id_writer=?;



【お気に入りユーザDAO】
お気に入りユーザの一覧を表示させる

SELECT f.user_id, f.favorite_user, u.user_name, u.icon
FROM favorite_user AS f
(INNER) JOIN user AS u
ON f.user_id_favorite=u.user_id
WHERE f.user_id=? AND u.flag=1 AND u.open_close=1;


【マイコンテンツDAO】
コレクションの一覧を表示させる

SELECT m.user_id, m.contents_id, m.status, c.title, c.ruby, c.genre, c.creator, c.year, c.image
FROM my_contents AS m
(INNER) contents AS c
ON m.contents_id=c.contents_id
WHERE m.user_id=?
AND m.status=1;


ウィッシュリストの一覧を表示させる

SELECT m.user_id, m.contents_id, m.status, c.title, c.ruby, c.genre, c.creator, c.year, c.image
FROM my_contents AS m
(INNER) contents AS c
ON m.contents_id=c.contents_id
WHERE m.user_id=?
AND m.status=0;


【コンテンツDAO】
コンテンツ詳細画面を表示させる



【コンテンツDAO】
ランダムチャットの相手を選出する
SELECT m.contents_id, u.user_id, u.user_name, u.icon
FROM my_contents AS m
INNER JOIN user AS u
ON m.user_id=u.user_id
WHERE m.contents_id=?  AND u.flag=1  AND u.open_close=1


【ユーザDAO？】
指定チャットの相手を検索する


【ポスト・ポスト受け取りDAO】
ポスト受け取り時の処理
１．ポストテーブルからおすすめをとってくる（受け取ったサーブレット側でランダムに選ぶ）
SELECT post_id, title, recommend 
FROM post;

２．受け取りテーブルに受け取ったおすすめを記録する
INSERT INTO post_recieve(user_id, post_id, created_at) VALUES(?, ?, ?);


【ポストリストDAO】
ポスト投函一覧を表示させる
SELECT post_id, user_id_writer, title, recommend 
FROM post
WHERE user_id_writer=?;


【ポストリストDAO】
ポスト受け取り一覧を表示させる
SELECT r.user_id, p.title, p.recommend, p.interest
FROM post AS p
INNER JOIN post_recieve AS r
ON p.post_id=r.post_id
WHERE r.user_id=?



【コンテンツDAO】参考：BCDAO、コンテンツDAO
SELECT contents_id,title,ruby,genre,creator,year,image FROM contents
WHERE title LIKE ? OR ruby LIKE ? OR genre LIKE ? creator LIKE ? OR year LIKE ? OR  
ORDER BY ruby

// SQL文を完成させる
pStmt.setString(1, "%" + contents.getTitle() + "%");
pStmt.setString(2, "%" + contents.card.getRuby() + "%");
pStmt.setString(3, "%" + contents.card.getGenre() + "%");
pStmt.setString(4, "%" + contents.card.getCreator() + "%");
pStmt.setString(5, "%" + contents.card.getYear() + "%");


【マイコンテンツDAO】
INSERT INTO my_contents(user_id_favorite,user_id) VALUES (?,?)
DELETE FROM my_contents WHERE user_id_favorite=? AND user_id=?


【いいねDAO】
INSERT INTO my_contents(user_id_favorite,user_id) VALUES (?,?)
DELETE FROM my_contents WHERE user_id_favorite=? AND user_id=?